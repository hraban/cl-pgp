(in-package :cl-pgp)

(defparameter *tags*
  '((1 . public-session-key)
    (2 . signature)
    (3 . symmetric-session-key)
    (4 . one-pass-signature)
    (5 . secret-key)
    (6 . public-key)
    (7 . secret-subkey)
    (8 . compressed-data)
    (9 . symmetric-data)
    (10 . marker)
    (11 . literal-data)
    (12 . trust)
    (13 . user-id)
    (14 . public-subkey)
    (17 . user-attribute)
    (18 . symmetric-integr-prot-data)
    (19 . modification-detection)
    (60 . private-60)
    (61 . private-61)
    (62 . private-62)
    (63 . private-63)))

(defun packet-length-2-octet (data)
  "Compute the length following the two-octet length style"
  (declare (type (vector (unsigned-byte 8)) data))
  (let ((b1 (aref data 1))
        (b2 (aref data 2)))
    (+ (ash (- b1 192) 8) b2 192)))

(defun packet-length-4-octet (data)
  (declare (type (vector (unsigned-byte 8)) data))
  (+ (ash (aref data 2) 24)
     (ash (aref data 3) 16)
     (ash (aref data 4) 8)
     (aref data 5)))

(defun packet-length (data)
  (declare (type (vector (unsigned-byte 8)) data))
  (let ((b1 (aref data 1)))
    (cond ((< b1 192) (values b1 1))
          ((< 191 b1 224) (values (packet-length-2-octet data) 2))
          ((= 255 b1) (values (packet-length-4-octet data) 5))
          (T (error "Partial packet length unsupported")))))

(defun decode-packet (data)
  (declare (type (vector (unsigned-byte 8)) data))
  (let* ((b0 (aref data 0))
         (version (logand #xC0 b0))
         (tagid (logand #x3F b0)))
    (unless (= version #xC0)
      (error "Only version 2 packets are supported"))
    (multiple-value-bind (len n) (packet-length data)
      ; ...
      (list tagid len data))))
